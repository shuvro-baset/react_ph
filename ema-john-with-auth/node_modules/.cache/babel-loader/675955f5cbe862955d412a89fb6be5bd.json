{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getStoredCart } from '../utilities/fakedb';\n\nconst useCart = products => {\n  _s();\n\n  const [cart, setCart] = useState([]);\n  useEffect(() => {\n    if (products.length) {\n      const savedCart = getStoredCart();\n      const storedCart = [];\n\n      for (const key in savedCart) {\n        const addedProduct = products.find(product => product.key === key);\n\n        if (addedProduct) {\n          // set quantity\n          const quantity = savedCart[key];\n          addedProduct.quantity = quantity;\n          storedCart.push(addedProduct);\n        }\n      }\n\n      setCart(storedCart);\n    }\n  }, [products]);\n  return [cart, setCart];\n};\n\n_s(useCart, \"5+HPoxSo1E/C3go3F1eDhM/DDhE=\");\n\nexport default useCart;","map":{"version":3,"sources":["F:/web design/React/react_ph/ema-john-with-auth/src/hooks/useCart.js"],"names":["useState","useEffect","getStoredCart","useCart","products","cart","setCart","length","savedCart","storedCart","key","addedProduct","find","product","quantity","push"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,qBAA9B;;AAEA,MAAMC,OAAO,GAAGC,QAAQ,IAAI;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIG,QAAQ,CAACG,MAAb,EAAqB;AACjB,YAAMC,SAAS,GAAGN,aAAa,EAA/B;AACA,YAAMO,UAAU,GAAG,EAAnB;;AACA,WAAK,MAAMC,GAAX,IAAkBF,SAAlB,EAA6B;AACzB,cAAMG,YAAY,GAAGP,QAAQ,CAACQ,IAAT,CAAcC,OAAO,IAAIA,OAAO,CAACH,GAAR,KAAgBA,GAAzC,CAArB;;AACA,YAAIC,YAAJ,EAAkB;AACd;AACA,gBAAMG,QAAQ,GAAGN,SAAS,CAACE,GAAD,CAA1B;AACAC,UAAAA,YAAY,CAACG,QAAb,GAAwBA,QAAxB;AACAL,UAAAA,UAAU,CAACM,IAAX,CAAgBJ,YAAhB;AACH;AACJ;;AACDL,MAAAA,OAAO,CAACG,UAAD,CAAP;AACH;AAEJ,GAjBQ,EAiBN,CAACL,QAAD,CAjBM,CAAT;AAmBA,SAAO,CAACC,IAAD,EAAOC,OAAP,CAAP;AACH,CAvBD;;GAAMH,O;;AAyBN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getStoredCart } from '../utilities/fakedb';\r\n\r\nconst useCart = products => {\r\n    const [cart, setCart] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (products.length) {\r\n            const savedCart = getStoredCart();\r\n            const storedCart = [];\r\n            for (const key in savedCart) {\r\n                const addedProduct = products.find(product => product.key === key);\r\n                if (addedProduct) {\r\n                    // set quantity\r\n                    const quantity = savedCart[key];\r\n                    addedProduct.quantity = quantity;\r\n                    storedCart.push(addedProduct);\r\n                }\r\n            }\r\n            setCart(storedCart);\r\n        }\r\n\r\n    }, [products]);\r\n\r\n    return [cart, setCart];\r\n}\r\n\r\nexport default useCart;"]},"metadata":{},"sourceType":"module"}